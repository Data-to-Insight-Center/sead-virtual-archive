package org.seadva.registry.database.factories.vaRegistry;

import com.felees.hbnpojogen.randomlib.data.dataGeneration.*;
import org.seadva.registry.database.factories.vaRegistry.VaRegistryDataPoolFactory;
import org.seadva.registry.database.model.obj.vaRegistry.*;
import org.springframework.stereotype.Component;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;

/** 
 * DAO factory implementation.
 * @author autogenerated
 */
@Component
public class VaRegistryDataPoolFactory {
	/** Table commit order. */
    private static final Multimap<String, String> tableDeps = ArrayListMultimap.create();
	/** DB commit order. */
	private static final String[] commitOrder = new String[]{"Relation", "MetadataReference", "Event", "DataLocation", "DataIdentifier", "Collection", "Aggregation", "AgentRole", "AgentProfile", "Agent", "Transition", "State", "RoleType", "Repository", "RelationType", "Property", "ProfileType", "MetadataType", "Format", "Fixity", "File", "EventType", "EntityType", "EntityContent", "DataIdentifierType", "BaseEntity"};
	static{
		// Store table deps for possible use. 
 		tableDeps.put("Agent", "BaseEntity");
 		tableDeps.put("AgentProfile", "Agent");
 		tableDeps.put("AgentProfile", "ProfileType");
 		tableDeps.put("AgentRole", "Agent");
 		tableDeps.put("AgentRole", "RoleType");
 		tableDeps.put("Aggregation", "BaseEntity");
 		tableDeps.put("Collection", "BaseEntity");
 		tableDeps.put("Collection", "State");
 		tableDeps.put("DataIdentifier", "BaseEntity");
 		tableDeps.put("DataIdentifier", "DataIdentifierType");
 		tableDeps.put("DataLocation", "BaseEntity");
 		tableDeps.put("DataLocation", "Repository");
 		tableDeps.put("EntityContent", "BaseEntity");
 		tableDeps.put("EntityType", "BaseEntity");
 		tableDeps.put("Event", "BaseEntity");
 		tableDeps.put("Event", "EventType");
 		tableDeps.put("File", "BaseEntity");
 		tableDeps.put("Fixity", "File");
 		tableDeps.put("Format", "File");
 		tableDeps.put("MetadataReference", "BaseEntity");
 		tableDeps.put("MetadataReference", "MetadataType");
 		tableDeps.put("Property", "BaseEntity");
 		tableDeps.put("Property", "MetadataType");
 		tableDeps.put("Relation", "BaseEntity");
 		tableDeps.put("Relation", "RelationType");
 		tableDeps.put("State", "BaseEntity");
 		tableDeps.put("Transition", "EventType");
 		tableDeps.put("Transition", "State");
	}

    /**
     * Data pool factory for Agent.
     * @return AgentA Agent object
     */
    public static Agent getAgent() {

        Agent agent = new Agent();    
        
        agent.setEntityCreatedTime(BasicDataGenerator.generateDate());
        agent.setEntityLastUpdatedTime(BasicDataGenerator.generateDate());
        agent.setEntityName(BasicDataGenerator.generateRandomString(256));
        agent.setFirstName(BasicDataGenerator.generateRandomString(256));
        agent.setId(BasicDataGenerator.generateRandomString(127));
        agent.setLastName(BasicDataGenerator.generateRandomString(256));

        return agent;
    }

    /**
     * Data pool factory for AgentProfile.
     * @return AgentProfileA AgentProfile object
     */
    public static AgentProfile getAgentProfile() {

        AgentProfile agentProfile = new AgentProfile();    
        
        agentProfile.setId(getAgentProfilePK());
        agentProfile.setProfileValue(BasicDataGenerator.generateRandomString(256));

        return agentProfile;
    }

    /**
     * Data pool factory for AgentProfilePK.
     * @return AgentProfilePK A AgentProfilePK object
     */
    public static AgentProfilePK getAgentProfilePK() {

        AgentProfilePK agentProfilePK =  getAgentProfilePK(
	        getAgent(), getProfileType());

		return agentProfilePK;
       
    }

     /**
     * Data pool factory for AgentProfilePK.
     * @param agent A valid Agent object
     * @param profileType A valid ProfileType object
     * @return AgentProfilePK A AgentProfilePK object
     */
    public static AgentProfilePK getAgentProfilePK(Agent agent, ProfileType profileType) {
        AgentProfilePK agentProfilePK = new AgentProfilePK();     
        agentProfilePK.setAgent(agent);
        agentProfilePK.setProfileType(profileType);

        return agentProfilePK;
    }

    /**
     * Data pool factory for AgentRole.
     * @return AgentRoleA AgentRole object
     */
    public static AgentRole getAgentRole() {

        AgentRole agentRole = new AgentRole();    
        
        agentRole.setId(getAgentRolePK());

        return agentRole;
    }

    /**
     * Data pool factory for AgentRolePK.
     * @return AgentRolePK A AgentRolePK object
     */
    public static AgentRolePK getAgentRolePK() {

        AgentRolePK agentRolePK =  getAgentRolePK(
	        getAgent(), getRoleType());

		return agentRolePK;
       
    }

     /**
     * Data pool factory for AgentRolePK.
     * @param agent A valid Agent object
     * @param roleType A valid RoleType object
     * @return AgentRolePK A AgentRolePK object
     */
    public static AgentRolePK getAgentRolePK(Agent agent, RoleType roleType) {
        AgentRolePK agentRolePK = new AgentRolePK();     
        agentRolePK.setAgent(agent);
        agentRolePK.setRoleType(roleType);

        return agentRolePK;
    }

    /**
     * Data pool factory for Aggregation.
     * @return AggregationA Aggregation object
     */
    public static Aggregation getAggregation() {

        Aggregation aggregation = new Aggregation();    
        
        aggregation.setId(getAggregationPK());

        return aggregation;
    }

    /**
     * Data pool factory for AggregationPK.
     * @return AggregationPK A AggregationPK object
     */
    public static AggregationPK getAggregationPK() {

        AggregationPK aggregationPK =  getAggregationPK(
	        getBaseEntity(), getBaseEntity());

		return aggregationPK;
       
    }

     /**
     * Data pool factory for AggregationPK.
     * @param child A valid BaseEntity object
     * @param parent A valid BaseEntity object
     * @return AggregationPK A AggregationPK object
     */
    public static AggregationPK getAggregationPK(BaseEntity child, BaseEntity parent) {
        AggregationPK aggregationPK = new AggregationPK();     
        aggregationPK.setChild(child);
        aggregationPK.setParent(parent);

        return aggregationPK;
    }

    /**
     * Data pool factory for BaseEntity.
     * @return BaseEntityA BaseEntity object
     */
    public static BaseEntity getBaseEntity() {

        BaseEntity baseEntity = new BaseEntity();    
        
        baseEntity.setEntityCreatedTime(BasicDataGenerator.generateDate());
        baseEntity.setEntityLastUpdatedTime(BasicDataGenerator.generateDate());
        baseEntity.setEntityName(BasicDataGenerator.generateRandomString(256));
        baseEntity.setId(BasicDataGenerator.generateRandomString(127));

        return baseEntity;
    }

    /**
     * Data pool factory for Collection.
     * @return Collection A Collection object
     */
    public static Collection getCollection() {

        Collection collection =  getCollection(
	        getState());

		return collection;
       
    }

     /**
     * Data pool factory for Collection.
     * @param state A valid State object
     * @return Collection A Collection object
     */
    public static Collection getCollection(State state) {
        Collection collection = new Collection();     
        collection.setEntityCreatedTime(BasicDataGenerator.generateDate());
        collection.setEntityLastUpdatedTime(BasicDataGenerator.generateDate());
        collection.setEntityName(BasicDataGenerator.generateRandomString(256));
        collection.setId(BasicDataGenerator.generateRandomString(127));
        collection.setIsObsolete(BasicDataGenerator.generateRandomInt());
        collection.setName(BasicDataGenerator.generateRandomString(127));
		if (state != null) {
			state.addCollection (collection);
		}
        collection.setVersionNum(BasicDataGenerator.generateRandomString(127));

        return collection;
    }

    /**
     * Data pool factory for DataIdentifier.
     * @return DataIdentifierA DataIdentifier object
     */
    public static DataIdentifier getDataIdentifier() {

        DataIdentifier dataIdentifier = new DataIdentifier();    
        
        dataIdentifier.setDataIdentifierValue(BasicDataGenerator.generateRandomString(256));
        dataIdentifier.setId(getDataIdentifierPK());

        return dataIdentifier;
    }

    /**
     * Data pool factory for DataIdentifierPK.
     * @return DataIdentifierPK A DataIdentifierPK object
     */
    public static DataIdentifierPK getDataIdentifierPK() {

        DataIdentifierPK dataIdentifierPK =  getDataIdentifierPK(
	        getDataIdentifierType(), getBaseEntity());

		return dataIdentifierPK;
       
    }

     /**
     * Data pool factory for DataIdentifierPK.
     * @param dataIdentifierType A valid DataIdentifierType object
     * @param entity A valid BaseEntity object
     * @return DataIdentifierPK A DataIdentifierPK object
     */
    public static DataIdentifierPK getDataIdentifierPK(DataIdentifierType dataIdentifierType, BaseEntity entity) {
        DataIdentifierPK dataIdentifierPK = new DataIdentifierPK();     
        dataIdentifierPK.setDataIdentifierType(dataIdentifierType);
        dataIdentifierPK.setEntity(entity);

        return dataIdentifierPK;
    }

    /**
     * Data pool factory for DataIdentifierType.
     * @return DataIdentifierTypeA DataIdentifierType object
     */
    public static DataIdentifierType getDataIdentifierType() {

        DataIdentifierType dataIdentifierType = new DataIdentifierType();    
        
        dataIdentifierType.setDataIdentifierTypeName(BasicDataGenerator.generateRandomString(127));
        dataIdentifierType.setId(BasicDataGenerator.generateRandomString(127));
        dataIdentifierType.setSchemaUri(BasicDataGenerator.generateRandomString(256));

        return dataIdentifierType;
    }

    /**
     * Data pool factory for DataLocation.
     * @return DataLocationA DataLocation object
     */
    public static DataLocation getDataLocation() {

        DataLocation dataLocation = new DataLocation();    
        
        dataLocation.setId(getDataLocationPK());
        dataLocation.setIsMasterCopy(BasicDataGenerator.generateRandomInt());
        dataLocation.setLocationValue(BasicDataGenerator.generateRandomString(256));

        return dataLocation;
    }

    /**
     * Data pool factory for DataLocationPK.
     * @return DataLocationPK A DataLocationPK object
     */
    public static DataLocationPK getDataLocationPK() {

        DataLocationPK dataLocationPK =  getDataLocationPK(
	        getBaseEntity(), getRepository());

		return dataLocationPK;
       
    }

     /**
     * Data pool factory for DataLocationPK.
     * @param entity A valid BaseEntity object
     * @param locationType A valid Repository object
     * @return DataLocationPK A DataLocationPK object
     */
    public static DataLocationPK getDataLocationPK(BaseEntity entity, Repository locationType) {
        DataLocationPK dataLocationPK = new DataLocationPK();     
        dataLocationPK.setEntity(entity);
        dataLocationPK.setLocationType(locationType);

        return dataLocationPK;
    }

    /**
     * Data pool factory for EntityContent.
     * @return EntityContent A EntityContent object
     */
    public static EntityContent getEntityContent() {

        EntityContent entityContent =  getEntityContent(
	        getBaseEntity());

		return entityContent;
       
    }

     /**
     * Data pool factory for EntityContent.
     * @param entity A valid BaseEntity object
     * @return EntityContent A EntityContent object
     */
    public static EntityContent getEntityContent(BaseEntity entity) {
        EntityContent entityContent = new EntityContent();     
		if (entity != null) {
			entity.addEntityContent (entityContent);
		}
        entityContent.setEntityContentData(BasicDataGenerator.generateRandomBinary(2147483647));

        return entityContent;
    }

    /**
     * Data pool factory for EntityType.
     * @return EntityTypeA EntityType object
     */
    public static EntityType getEntityType() {

        EntityType entityType = new EntityType();    
        
        entityType.setEntityTypeName(BasicDataGenerator.generateRandomString(256));
        entityType.setId(getEntityTypePK());

        return entityType;
    }

    /**
     * Data pool factory for EntityTypePK.
     * @return EntityTypePK A EntityTypePK object
     */
    public static EntityTypePK getEntityTypePK() {

        EntityTypePK entityTypePK =  getEntityTypePK(
	        getBaseEntity());

		return entityTypePK;
       
    }

     /**
     * Data pool factory for EntityTypePK.
     * @param entity A valid BaseEntity object
     * @return EntityTypePK A EntityTypePK object
     */
    public static EntityTypePK getEntityTypePK(BaseEntity entity) {
        EntityTypePK entityTypePK = new EntityTypePK();     
        entityTypePK.setEntity(entity);
        entityTypePK.setEntityTypeId(BasicDataGenerator.generateRandomString(127));

        return entityTypePK;
    }

    /**
     * Data pool factory for Event.
     * @return Event A Event object
     */
    public static Event getEvent() {

        Event event =  getEvent(
	        getEventType());

		return event;
       
    }

     /**
     * Data pool factory for Event.
     * @param eventType A valid EventType object
     * @return Event A Event object
     */
    public static Event getEvent(EventType eventType) {
        Event event = new Event();     
        event.setEntityCreatedTime(BasicDataGenerator.generateDate());
        event.setEntityLastUpdatedTime(BasicDataGenerator.generateDate());
        event.setEntityName(BasicDataGenerator.generateRandomString(256));
        event.setEventDetail(BasicDataGenerator.generateRandomString(256));
		if (eventType != null) {
			eventType.addEvent (event);
		}
        event.setId(BasicDataGenerator.generateRandomString(127));

        return event;
    }

    /**
     * Data pool factory for EventType.
     * @return EventTypeA EventType object
     */
    public static EventType getEventType() {

        EventType eventType = new EventType();    
        
        eventType.setEventDescription(BasicDataGenerator.generateRandomString(256));
        eventType.setEventName(BasicDataGenerator.generateRandomString(127));
        eventType.setId(BasicDataGenerator.generateRandomString(127));

        return eventType;
    }

    /**
     * Data pool factory for File.
     * @return FileA File object
     */
    public static File getFile() {

        File file = new File();    
        
        file.setEntityCreatedTime(BasicDataGenerator.generateDate());
        file.setEntityLastUpdatedTime(BasicDataGenerator.generateDate());
        file.setEntityName(BasicDataGenerator.generateRandomString(256));
        file.setFileName(BasicDataGenerator.generateRandomString(127));
        file.setId(BasicDataGenerator.generateRandomString(127));
        file.setIsObsolete(BasicDataGenerator.generateRandomInt());
        file.setSizeBytes(BasicDataGenerator.generateRandomLong());
        file.setVersionNum(BasicDataGenerator.generateRandomString(127));

        return file;
    }

    /**
     * Data pool factory for Fixity.
     * @return FixityA Fixity object
     */
    public static Fixity getFixity() {

        Fixity fixity = new Fixity();    
        
        fixity.setId(getFixityPK());
        fixity.setValuestr(BasicDataGenerator.generateRandomString(127));

        return fixity;
    }

    /**
     * Data pool factory for FixityPK.
     * @return FixityPK A FixityPK object
     */
    public static FixityPK getFixityPK() {

        FixityPK fixityPK =  getFixityPK(
	        getFile());

		return fixityPK;
       
    }

     /**
     * Data pool factory for FixityPK.
     * @param entity A valid File object
     * @return FixityPK A FixityPK object
     */
    public static FixityPK getFixityPK(File entity) {
        FixityPK fixityPK = new FixityPK();     
        fixityPK.setEntity(entity);
        fixityPK.setType(BasicDataGenerator.generateRandomString(127));

        return fixityPK;
    }

    /**
     * Data pool factory for Format.
     * @return Format A Format object
     */
    public static Format getFormat() {

        Format format =  getFormat(
	        getFile());

		return format;
       
    }

     /**
     * Data pool factory for Format.
     * @param entity A valid File object
     * @return Format A Format object
     */
    public static Format getFormat(File entity) {
        Format format = new Format();     
		if (entity != null) {
			entity.addFormat (format);
		}
        format.setType(BasicDataGenerator.generateRandomString(127));
        format.setValuestr(BasicDataGenerator.generateRandomString(127));

        return format;
    }

    /**
     * Data pool factory for MetadataReference.
     * @return MetadataReference A MetadataReference object
     */
    public static MetadataReference getMetadataReference() {

        MetadataReference metadataReference =  getMetadataReference(
	        getMetadataType(), getBaseEntity(), getBaseEntity());

		return metadataReference;
       
    }

     /**
     * Data pool factory for MetadataReference.
     * @param metadata A valid MetadataType object
     * @param objectEntity A valid BaseEntity object
     * @param subjectEntity A valid BaseEntity object
     * @return MetadataReference A MetadataReference object
     */
    public static MetadataReference getMetadataReference(MetadataType metadata, BaseEntity objectEntity, BaseEntity subjectEntity) {
        MetadataReference metadataReference = new MetadataReference();     
		if (metadata != null) {
			metadata.addMetadataReference (metadataReference);
		}
		if (objectEntity != null) {
			objectEntity.addMetadataReference (metadataReference);
		}
        metadataReference.setSubjectEntity(subjectEntity);

        return metadataReference;
    }

    /**
     * Data pool factory for MetadataType.
     * @return MetadataTypeA MetadataType object
     */
    public static MetadataType getMetadataType() {

        MetadataType metadataType = new MetadataType();    
        
        metadataType.setId(BasicDataGenerator.generateRandomString(127));
        metadataType.setMetadataElement(BasicDataGenerator.generateRandomString(256));
        metadataType.setMetadataSchema(BasicDataGenerator.generateRandomString(256));

        return metadataType;
    }

    /**
     * Data pool factory for ProfileType.
     * @return ProfileTypeA ProfileType object
     */
    public static ProfileType getProfileType() {

        ProfileType profileType = new ProfileType();    
        
        profileType.setId(BasicDataGenerator.generateRandomString(127));
        profileType.setProfileTypeName(BasicDataGenerator.generateRandomString(127));
        profileType.setProfileTypeSchema(BasicDataGenerator.generateRandomString(256));

        return profileType;
    }

    /**
     * Data pool factory for Property.
     * @return Property A Property object
     */
    public static Property getProperty() {

        Property property =  getProperty(
	        getBaseEntity(), getMetadataType());

		return property;
       
    }

     /**
     * Data pool factory for Property.
     * @param entity A valid BaseEntity object
     * @param metadata A valid MetadataType object
     * @return Property A Property object
     */
    public static Property getProperty(BaseEntity entity, MetadataType metadata) {
        Property property = new Property();     
		if (entity != null) {
			entity.addProperty (property);
		}
		if (metadata != null) {
			metadata.addProperty (property);
		}
        property.setValuestr(BasicDataGenerator.generateRandomString(127));

        return property;
    }

    /**
     * Data pool factory for Relation.
     * @return RelationA Relation object
     */
    public static Relation getRelation() {

        Relation relation = new Relation();    
        
        relation.setId(getRelationPK());

        return relation;
    }

    /**
     * Data pool factory for RelationPK.
     * @return RelationPK A RelationPK object
     */
    public static RelationPK getRelationPK() {

        RelationPK relationPK =  getRelationPK(
	        getBaseEntity(), getBaseEntity(), getRelationType());

		return relationPK;
       
    }

     /**
     * Data pool factory for RelationPK.
     * @param cause A valid BaseEntity object
     * @param effect A valid BaseEntity object
     * @param relationType A valid RelationType object
     * @return RelationPK A RelationPK object
     */
    public static RelationPK getRelationPK(BaseEntity cause, BaseEntity effect, RelationType relationType) {
        RelationPK relationPK = new RelationPK();     
        relationPK.setCause(cause);
        relationPK.setEffect(effect);
        relationPK.setRelationType(relationType);

        return relationPK;
    }

    /**
     * Data pool factory for RelationType.
     * @return RelationTypeA RelationType object
     */
    public static RelationType getRelationType() {

        RelationType relationType = new RelationType();    
        
        relationType.setId(BasicDataGenerator.generateRandomString(127));
        relationType.setRelationElement(BasicDataGenerator.generateRandomString(256));
        relationType.setRelationSchema(BasicDataGenerator.generateRandomString(256));

        return relationType;
    }

    /**
     * Data pool factory for Repository.
     * @return RepositoryA Repository object
     */
    public static Repository getRepository() {

        Repository repository = new Repository();    
        
        repository.setAffiliation(BasicDataGenerator.generateRandomString(256));
        repository.setId(BasicDataGenerator.generateRandomString(127));
        repository.setRepositoryName(BasicDataGenerator.generateRandomString(127));
        repository.setSoftwareType(BasicDataGenerator.generateRandomString(256));

        return repository;
    }

    /**
     * Data pool factory for RoleType.
     * @return RoleTypeA RoleType object
     */
    public static RoleType getRoleType() {

        RoleType roleType = new RoleType();    
        
        roleType.setId(BasicDataGenerator.generateRandomString(127));
        roleType.setRoleDescription(BasicDataGenerator.generateRandomString(256));
        roleType.setRoleTypeName(BasicDataGenerator.generateRandomString(127));

        return roleType;
    }

    /**
     * Data pool factory for State.
     * @return StateA State object
     */
    public static State getState() {

        State state = new State();    
        
        state.setEntityCreatedTime(BasicDataGenerator.generateDate());
        state.setEntityLastUpdatedTime(BasicDataGenerator.generateDate());
        state.setEntityName(BasicDataGenerator.generateRandomString(256));
        state.setId(BasicDataGenerator.generateRandomString(127));
        state.setStateName(BasicDataGenerator.generateRandomString(127));
        state.setStateType(BasicDataGenerator.generateRandomString(127));

        return state;
    }

    /**
     * Data pool factory for Transition.
     * @return TransitionA Transition object
     */
    public static Transition getTransition() {

        Transition transition = new Transition();    
        
        transition.setId(getTransitionPK());

        return transition;
    }

    /**
     * Data pool factory for TransitionPK.
     * @return TransitionPK A TransitionPK object
     */
    public static TransitionPK getTransitionPK() {

        TransitionPK transitionPK =  getTransitionPK(
	        getEventType(), getState(), getState());

		return transitionPK;
       
    }

     /**
     * Data pool factory for TransitionPK.
     * @param eventType A valid EventType object
     * @param nextState A valid State object
     * @param startState A valid State object
     * @return TransitionPK A TransitionPK object
     */
    public static TransitionPK getTransitionPK(EventType eventType, State nextState, State startState) {
        TransitionPK transitionPK = new TransitionPK();     
        transitionPK.setEventType(eventType);
        transitionPK.setNextState(nextState);
        transitionPK.setStartState(startState);

        return transitionPK;
    }
    /** Returns the commit order of this database. 
	 * Useful for iterating through the classes for deletion in the right order. 
	 * @return String[] list of classes
	 */
	public static String[] getDBCommitOrder() {
		return commitOrder;
	}
	
	/**
	 * @param className classname to return
	 * @return the tabledeps for the given class name
	 */
	public static java.util.Collection<String> getTabledeps(String className) {
		return tableDeps.get(className);
	}
	
}