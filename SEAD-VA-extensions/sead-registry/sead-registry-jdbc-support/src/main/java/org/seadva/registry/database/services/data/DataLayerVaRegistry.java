package org.seadva.registry.database.services.data;

import java.io.Serializable;
import org.seadva.registry.database.model.obj.vaRegistry.Agent;
import org.seadva.registry.database.model.obj.vaRegistry.AgentProfile;
import org.seadva.registry.database.model.obj.vaRegistry.AgentProfilePK;
import org.seadva.registry.database.model.obj.vaRegistry.AgentRole;
import org.seadva.registry.database.model.obj.vaRegistry.AgentRolePK;
import org.seadva.registry.database.model.obj.vaRegistry.Aggregation;
import org.seadva.registry.database.model.obj.vaRegistry.AggregationPK;
import org.seadva.registry.database.model.obj.vaRegistry.BaseEntity;
import org.seadva.registry.database.model.obj.vaRegistry.Collection;
import org.seadva.registry.database.model.obj.vaRegistry.DataIdentifier;
import org.seadva.registry.database.model.obj.vaRegistry.DataIdentifierPK;
import org.seadva.registry.database.model.obj.vaRegistry.DataIdentifierType;
import org.seadva.registry.database.model.obj.vaRegistry.DataLocation;
import org.seadva.registry.database.model.obj.vaRegistry.DataLocationPK;
import org.seadva.registry.database.model.obj.vaRegistry.EntityContent;
import org.seadva.registry.database.model.obj.vaRegistry.EntityType;
import org.seadva.registry.database.model.obj.vaRegistry.EntityTypePK;
import org.seadva.registry.database.model.obj.vaRegistry.Event;
import org.seadva.registry.database.model.obj.vaRegistry.EventType;
import org.seadva.registry.database.model.obj.vaRegistry.File;
import org.seadva.registry.database.model.obj.vaRegistry.Fixity;
import org.seadva.registry.database.model.obj.vaRegistry.FixityPK;
import org.seadva.registry.database.model.obj.vaRegistry.Format;
import org.seadva.registry.database.model.obj.vaRegistry.MetadataReference;
import org.seadva.registry.database.model.obj.vaRegistry.MetadataType;
import org.seadva.registry.database.model.obj.vaRegistry.ProfileType;
import org.seadva.registry.database.model.obj.vaRegistry.Property;
import org.seadva.registry.database.model.obj.vaRegistry.Relation;
import org.seadva.registry.database.model.obj.vaRegistry.RelationPK;
import org.seadva.registry.database.model.obj.vaRegistry.RelationType;
import org.seadva.registry.database.model.obj.vaRegistry.Repository;
import org.seadva.registry.database.model.obj.vaRegistry.RoleType;
import org.seadva.registry.database.model.obj.vaRegistry.State;
import org.seadva.registry.database.model.obj.vaRegistry.Transition;
import org.seadva.registry.database.model.obj.vaRegistry.TransitionPK;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.ReplicationMode;
import org.hibernate.Session;
import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.Basic;
import javax.persistence.FetchType;

/**
 * Data layer.
 * @author autogenerated
 */
@TransactionConfiguration(defaultRollback=false)
@Transactional (propagation = Propagation.REQUIRED, readOnly = false)
public interface DataLayerVaRegistry {

    /**
     * Deletes the given object from disk.
     * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to delete
     */
    <T> void delete(T persistentObject);
    /**
     * Refresh the object $class.className from disk.
     * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to reload
     */
    <T> void refresh(T persistentObject);

    /**
     * Saves the given object to disk.
     * @param persistentObject Object to save
	 * @param <T> A DataLayerObject-derived type
     * @return Identifier of saved object 
     */
    <T> Serializable save(T persistentObject);
    /**
     * Saves or updates the given $class.className object to disk.
	 * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to save 
     */
    <T> void saveOrUpdate(T persistentObject);
    /**
     * Updates the given object to disk.
	 * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to update 
     */
    <T> void update(T persistentObject);


    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Agent obj) directly
     * @param id Identifier to delete
     */
    void deleteAgent(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Agent object
     */
    Agent loadAgent(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Agent getAgent(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (AgentProfile obj) directly
     * @param id Identifier to delete
     */
    void deleteAgentProfile(final AgentProfilePK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a AgentProfile object
     */
    AgentProfile loadAgentProfile(final AgentProfilePK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     AgentProfile getAgentProfile(final AgentProfilePK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (AgentRole obj) directly
     * @param id Identifier to delete
     */
    void deleteAgentRole(final AgentRolePK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a AgentRole object
     */
    AgentRole loadAgentRole(final AgentRolePK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     AgentRole getAgentRole(final AgentRolePK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Aggregation obj) directly
     * @param id Identifier to delete
     */
    void deleteAggregation(final AggregationPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Aggregation object
     */
    Aggregation loadAggregation(final AggregationPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Aggregation getAggregation(final AggregationPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (BaseEntity obj) directly
     * @param id Identifier to delete
     */
    void deleteBaseEntity(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a BaseEntity object
     */
    BaseEntity loadBaseEntity(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     BaseEntity getBaseEntity(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Collection obj) directly
     * @param id Identifier to delete
     */
    void deleteCollection(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Collection object
     */
    Collection loadCollection(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Collection getCollection(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (DataIdentifier obj) directly
     * @param id Identifier to delete
     */
    void deleteDataIdentifier(final DataIdentifierPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a DataIdentifier object
     */
    DataIdentifier loadDataIdentifier(final DataIdentifierPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     DataIdentifier getDataIdentifier(final DataIdentifierPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (DataIdentifierType obj) directly
     * @param id Identifier to delete
     */
    void deleteDataIdentifierType(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a DataIdentifierType object
     */
    DataIdentifierType loadDataIdentifierType(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     DataIdentifierType getDataIdentifierType(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (DataLocation obj) directly
     * @param id Identifier to delete
     */
    void deleteDataLocation(final DataLocationPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a DataLocation object
     */
    DataLocation loadDataLocation(final DataLocationPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     DataLocation getDataLocation(final DataLocationPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (EntityContent obj) directly
     * @param id Identifier to delete
     */
    void deleteEntityContent(final Integer id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a EntityContent object
     */
    EntityContent loadEntityContent(final Integer id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     EntityContent getEntityContent(final Integer id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (EntityType obj) directly
     * @param id Identifier to delete
     */
    void deleteEntityType(final EntityTypePK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a EntityType object
     */
    EntityType loadEntityType(final EntityTypePK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     EntityType getEntityType(final EntityTypePK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Event obj) directly
     * @param id Identifier to delete
     */
    void deleteEvent(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Event object
     */
    Event loadEvent(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Event getEvent(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (EventType obj) directly
     * @param id Identifier to delete
     */
    void deleteEventType(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a EventType object
     */
    EventType loadEventType(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     EventType getEventType(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (File obj) directly
     * @param id Identifier to delete
     */
    void deleteFile(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a File object
     */
    File loadFile(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     File getFile(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Fixity obj) directly
     * @param id Identifier to delete
     */
    void deleteFixity(final FixityPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Fixity object
     */
    Fixity loadFixity(final FixityPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Fixity getFixity(final FixityPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Format obj) directly
     * @param id Identifier to delete
     */
    void deleteFormat(final Long id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Format object
     */
    Format loadFormat(final Long id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Format getFormat(final Long id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (MetadataReference obj) directly
     * @param id Identifier to delete
     */
    void deleteMetadataReference(final Long id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a MetadataReference object
     */
    MetadataReference loadMetadataReference(final Long id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     MetadataReference getMetadataReference(final Long id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (MetadataType obj) directly
     * @param id Identifier to delete
     */
    void deleteMetadataType(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a MetadataType object
     */
    MetadataType loadMetadataType(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     MetadataType getMetadataType(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ProfileType obj) directly
     * @param id Identifier to delete
     */
    void deleteProfileType(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ProfileType object
     */
    ProfileType loadProfileType(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     ProfileType getProfileType(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Property obj) directly
     * @param id Identifier to delete
     */
    void deleteProperty(final Long id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Property object
     */
    Property loadProperty(final Long id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Property getProperty(final Long id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Relation obj) directly
     * @param id Identifier to delete
     */
    void deleteRelation(final RelationPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Relation object
     */
    Relation loadRelation(final RelationPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Relation getRelation(final RelationPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (RelationType obj) directly
     * @param id Identifier to delete
     */
    void deleteRelationType(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a RelationType object
     */
    RelationType loadRelationType(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     RelationType getRelationType(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Repository obj) directly
     * @param id Identifier to delete
     */
    void deleteRepository(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Repository object
     */
    Repository loadRepository(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Repository getRepository(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (RoleType obj) directly
     * @param id Identifier to delete
     */
    void deleteRoleType(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a RoleType object
     */
    RoleType loadRoleType(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     RoleType getRoleType(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (State obj) directly
     * @param id Identifier to delete
     */
    void deleteState(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a State object
     */
    State loadState(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     State getState(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Transition obj) directly
     * @param id Identifier to delete
     */
    void deleteTransition(final TransitionPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Transition object
     */
    Transition loadTransition(final TransitionPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Transition getTransition(final TransitionPK id);  
    /** Returns a query handle.
     * @param query Query to use
     * @return A query instance
     */
    @Transactional
    @Basic(fetch = FetchType.EAGER)
     Query createQuery(final String query);
    /** Returns a criteria handle.
     * @param criteria Criteria to use
     * @return A criteria instance
     */
     Criteria createCriteria(final String criteria);
    /** Returns a Query handle based on your package-level named query.
     * @param query Query to use
     * @return A query instance
     */
     Query getNamedQuery(final String query);
    /** Create a new Criteria instance, for the given entity class, or a superclass of an entity class.
	* @param persistentObject a class, which is persistent, or has persistent subclasses 
	* @return Criteria instance
	*/
	@SuppressWarnings("unchecked")
	Criteria createCriteria(Class persistentObject);
    /** Flushes the currently open session.
	*/
	void flushSession();
    /** Clears the currently open session.
	*/

    public void closeSession();

	void clearSession();
    /** Flushes and clears the currently open session.
	*/
	void flushAndClearSession();
	/** Call currentSession.replicate.
	 * @param obj to replicate
	 * @param replicationMode mode
	 */ 
	void replicate(Object obj, ReplicationMode replicationMode);
	/** Hibernate Merge. 
	 * @param obj to merge
	 * @return obj merged.
	 */
	Object merge(Object obj);
	/** Returns the current session.
	 * @return the currently active session
	 */
	Session getCurrentSession();

    Session createNewSession();
	/** Returns a query handle.
     * @param query Query to use
     * @return A query instance
     */

     SQLQuery createSQLQuery(final String query);
    /** Remove this instance from the session cache. 
	 * Changes to the instance will not be synchronized with the database
	 * @param obj object to evict
	 */
	void evict(Object obj);
    /**
     * Return the persistent instance of the given entity class with the given 
     * identifier, or null if there is no such persistent instance. 
     * (If the instance, or a proxy for the instance, is already 
     * associated with the session, return that instance or proxy)
     *
     * @param clazz a persistent class
     * @param id a valid identifier of an existing persistent instance of the class
     * @return a persistent instance or null
     * @throws org.hibernate.HibernateException
     */
	Object get(Class<?> clazz, Serializable id) throws HibernateException;	


    /**
     * Return the persistent instance of the given entity class with the given identifier, assuming that the instance exists.
     *You should not use this method to determine if an instance exists (use get() instead). Use this only to retrieve an instance that you assume exists, where non-existence would be an actual error.
     *
     * @param clazz a persistent class
     * @param id a valid identifier of an existing persistent instance of the class
     * @return the persistent instance or proxy
     * @throws org.hibernate.HibernateException
     */
	Object load(Class<?> clazz, Serializable id) throws HibernateException;
	/**
	 * Reattaches the given entity to the current session using LockMode.NONE
	 *
	 * @param entity to reattach
	 */
	void reattachEntityWithNoLock(IPojoGenEntity entity);
	/**
	 * Reattaches the given entities to the current session.
	 *
	 * @param entities to attach
	 */
	void reattachEntitiesWithNoLock(java.util.Collection<? extends IPojoGenEntity> entities);}

