package org.seadva.registry.database.model.obj.vaRegistry;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.google.gson.annotations.Expose;
import org.seadva.registry.database.model.obj.vaRegistry.iface.IFixity;


/** 
 * Object mapping for hibernate-handled table: fixity.
 * @author autogenerated
 */

@Entity
@Table(name = "fixity", catalog = "va_registry")
public class Fixity implements Cloneable, Serializable, IPojoGenEntity, IFixity {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559002634L;

	

	/** Field mapping. */
    @Expose
	@Id 
	private FixityPK id;

	/** Field mapping. */
    @Expose
	@Column( nullable = false, length = 127  )
	private String valuestr;

	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Fixity() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Fixity(FixityPK id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id FixityPK object;
	 * @param valuestr String object;
	 */
	public Fixity(FixityPK id, String valuestr) {

		this.id = id;
		this.valuestr = valuestr;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Fixity.class;
	}
 

    /**
     * Return the value associated with the column: id.
	 * @return A FixityPK object (this.id)
	 */
	public FixityPK getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final FixityPK id) {
		this.id = id;
	}

    /**
     * Return the value associated with the column: valuestr.
	 * @return A String object (this.valuestr)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 127  )
	public String getValuestr() {
		return this.valuestr;
		
	}
	

  
    /**  
     * Set the value related to the column: valuestr.
	 * @param valuestr the valuestr value you wish to set
	 */
	public void setValuestr(final String valuestr) {
		this.valuestr = valuestr;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Fixity clone() throws CloneNotSupportedException {
		
        final Fixity copy = (Fixity)super.clone();

		copy.setId(this.getId());
		copy.setValuestr(this.getValuestr());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("valuestr: " + this.getValuestr());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see Object#equals(Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		if ( this == aThat ) {
			 return true;
		}

		if ((aThat == null) || ( !(aThat.getClass().equals(this.getClass())))) {
			 return false;
		}
	
		final Fixity that = (Fixity) aThat;
		return this.getId().equals(that.getId());
	}
	
	/** Calculate the hashcode.
	 * @see Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		return getId().hashCode();
	}
	

	
}
