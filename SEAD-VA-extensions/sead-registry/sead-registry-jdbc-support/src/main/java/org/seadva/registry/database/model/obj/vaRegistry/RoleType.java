package org.seadva.registry.database.model.obj.vaRegistry;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import com.google.gson.annotations.Expose;
import org.hibernate.proxy.HibernateProxy;
import org.seadva.registry.database.model.obj.vaRegistry.iface.IRoleType;

import javax.persistence.*;
import java.io.Serializable;
import java.util.*;


/** 
 * Object mapping for hibernate-handled table: role_type.
 * @author autogenerated
 */

@Entity
@Table(name = "role_type", catalog = "va_registry")
public class RoleType implements Cloneable, Serializable, IPojoGenEntity, IRoleType {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559002621L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	

	/** Field mapping. */
	private Set<AgentRole> agentRoles = new HashSet<AgentRole>();

	/** Field mapping. */
    @Expose
	private String id;
	/** Field mapping. */
    @Expose
	private String roleDescription;
	/** Field mapping. */
    @Expose
	private String roleTypeName;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public RoleType() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public RoleType(String id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id String object;
	 * @param roleDescription String object;
	 * @param roleTypeName String object;
	 */
	public RoleType(String id, String roleDescription, String roleTypeName) {

		this.id = id;
		this.roleDescription = roleDescription;
		this.roleTypeName = roleTypeName;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return RoleType.class;
	}
 

    /**
     * Return the value associated with the column: agentRole.
	 * @return A Set&lt;AgentRole&gt; object (this.agentRole)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.roleType"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "role_type_id", nullable = false  )
	public Set<AgentRole> getAgentRoles() {
		return this.agentRoles;
		
	}
	
	/**
	 * Adds a bi-directional link of type AgentRole to the agentRoles set.
	 * @param agentRole item to add
	 */
	public void addAgentRole(AgentRole agentRole) {
		agentRole.getId().setRoleType(this);
		this.agentRoles.add(agentRole);
	}

  
    /**  
     * Set the value related to the column: agentRole.
	 * @param agentRole the agentRole value you wish to set
	 */
	public void setAgentRoles(final Set<AgentRole> agentRole) {
		this.agentRoles = agentRole;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */
    @Id 
	@Basic( optional = false )
	@Column( name = "role_type_id", nullable = false, length = 127  )
	public String getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: roleDescription.
	 * @return A String object (this.roleDescription)
	 */
	@Basic( optional = false )
	@Column( name = "role_description", nullable = false, length = 256  )
	public String getRoleDescription() {
		return this.roleDescription;
		
	}
	

  
    /**  
     * Set the value related to the column: roleDescription.
	 * @param roleDescription the roleDescription value you wish to set
	 */
	public void setRoleDescription(final String roleDescription) {
		this.roleDescription = roleDescription;
	}

    /**
     * Return the value associated with the column: roleTypeName.
	 * @return A String object (this.roleTypeName)
	 */
	@Basic( optional = false )
	@Column( name = "role_type_name", nullable = false, length = 127  )
	public String getRoleTypeName() {
		return this.roleTypeName;
		
	}
	

  
    /**  
     * Set the value related to the column: roleTypeName.
	 * @param roleTypeName the roleTypeName value you wish to set
	 */
	public void setRoleTypeName(final String roleTypeName) {
		this.roleTypeName = roleTypeName;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public RoleType clone() throws CloneNotSupportedException {
		
        final RoleType copy = (RoleType)super.clone();

		if (this.getAgentRoles() != null) {
			copy.getAgentRoles().addAll(this.getAgentRoles());
		}
		copy.setId(this.getId());
		copy.setRoleDescription(this.getRoleDescription());
		copy.setRoleTypeName(this.getRoleTypeName());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("roleDescription: " + this.getRoleDescription() + ", ");
		sb.append("roleTypeName: " + this.getRoleTypeName());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see Object#equals(Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final RoleType that;
		try {
			that = (RoleType) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getRoleDescription() == null) && (that.getRoleDescription() == null)) || (getRoleDescription() != null && getRoleDescription().equals(that.getRoleDescription())));
		result = result && (((getRoleTypeName() == null) && (that.getRoleTypeName() == null)) || (getRoleTypeName() != null && getRoleTypeName().equals(that.getRoleTypeName())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
						newHashCode = String.valueOf(super.hashCode());

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode.hashCode();
	}
	

	
}
