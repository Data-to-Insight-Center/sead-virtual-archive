package org.seadva.registry.database.model.dao.vaRegistry.impl;

import org.seadva.registry.database.common.DBConnectionPool;
import org.seadva.registry.database.common.ObjectPool;
import org.seadva.registry.database.model.dao.vaRegistry.MetadataTypeDao;
import org.seadva.registry.database.model.obj.vaRegistry.MetadataType;
import org.springframework.stereotype.Repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


/**
 * DAO for table: MetadataType.
 * @author autogenerated
 */
@Repository
public class MetadataTypeDaoImpl implements MetadataTypeDao {

    protected Connection getConnection() throws SQLException {
        return connectionPool.getEntry();
    }
    public MetadataTypeDaoImpl(){
        connectionPool = DBConnectionPool.getInstance();
    }


    protected ObjectPool<Connection> connectionPool = null;

    @Override
    public MetadataType getMetadataType(String metadataName) {
        MetadataType metadataType = new MetadataType();
        Connection connection = null;
        PreparedStatement statement = null;

        try {
            connection = getConnection();

            statement = connection.prepareStatement("Select * from metadata_type where metadata_element=?");
            statement.setString(1, metadataName);
            ResultSet resultSet = statement.executeQuery();


            while (resultSet.next()) {
                metadataType.setId(resultSet.getString("metadata_id"));
                metadataType.setMetadataElement(resultSet.getString("metadata_element"));
                metadataType.setMetadataSchema(resultSet.getString("metadata_schema"));
                break;
            }


        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    //  log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }
        return metadataType;
    }

    @Override
    public MetadataType getMetadataTypeById(String metadataId) {
        MetadataType metadataType = new MetadataType();
        Connection connection = null;
        PreparedStatement statement = null;

        try {
            connection = getConnection();

            statement = connection.prepareStatement("Select * from metadata_type where metadata_id=?");
            statement.setString(1, metadataId);
            ResultSet resultSet = statement.executeQuery();


            while (resultSet.next()) {
                metadataType.setId(resultSet.getString("metadata_id"));
                metadataType.setMetadataElement(resultSet.getString("metadata_element"));
                metadataType.setMetadataSchema(resultSet.getString("metadata_schema"));
                break;
            }


        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    //  log.warn("Unable to close statement", e);
                }
                statement = null;
            }
            connectionPool.releaseEntry(connection);

        }
        return metadataType;
    }
}

