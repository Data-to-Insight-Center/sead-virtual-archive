package org.seadva.registry.database.model.obj.vaRegistry;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.google.gson.annotations.Expose;
import org.hibernate.proxy.HibernateProxy;
import org.seadva.registry.database.model.obj.vaRegistry.DataIdentifier;
import org.seadva.registry.database.model.obj.vaRegistry.iface.IDataIdentifierType;


/** 
 * Object mapping for hibernate-handled table: data_identifier_type.
 * @author autogenerated
 */

@Entity
@Table(name = "data_identifier_type", catalog = "va_registry")
public class DataIdentifierType implements Cloneable, Serializable, IPojoGenEntity, IDataIdentifierType {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559002645L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	

	/** Field mapping. */
	private Set<DataIdentifier> dataIdentifiers = new HashSet<DataIdentifier>();

	/** Field mapping. */
    @Expose
	private String dataIdentifierTypeName;
	/** Field mapping. */
    @Expose
	private String id;
	/** Field mapping. */
    @Expose
	private String schemaUri;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public DataIdentifierType() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public DataIdentifierType(String id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param dataIdentifierTypeName String object;
	 * @param id String object;
	 * @param schemaUri String object;
	 */
	public DataIdentifierType(String dataIdentifierTypeName, String id, String schemaUri) {

		this.dataIdentifierTypeName = dataIdentifierTypeName;
		this.id = id;
		this.schemaUri = schemaUri;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return DataIdentifierType.class;
	}
 

    /**
     * Return the value associated with the column: dataIdentifier.
	 * @return A Set&lt;DataIdentifier&gt; object (this.dataIdentifier)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.DETACH }, mappedBy = "id.dataIdentifierType"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "data_identifier_type_id", nullable = false  )
	public Set<DataIdentifier> getDataIdentifiers() {
		return this.dataIdentifiers;
		
	}
	
	/**
	 * Adds a bi-directional link of type DataIdentifier to the dataIdentifiers set.
	 * @param dataIdentifier item to add
	 */
	public void addDataIdentifier(DataIdentifier dataIdentifier) {
		dataIdentifier.getId().setDataIdentifierType(this);
		this.dataIdentifiers.add(dataIdentifier);
	}

  
    /**  
     * Set the value related to the column: dataIdentifier.
	 * @param dataIdentifier the dataIdentifier value you wish to set
	 */
	public void setDataIdentifiers(final Set<DataIdentifier> dataIdentifier) {
		this.dataIdentifiers = dataIdentifier;
	}

    /**
     * Return the value associated with the column: dataIdentifierTypeName.
	 * @return A String object (this.dataIdentifierTypeName)
	 */
	@Basic( optional = false , fetch = FetchType.EAGER)
	@Column( name = "data_identifier_type_name", nullable = false, length = 127  )
	public String getDataIdentifierTypeName() {
		return this.dataIdentifierTypeName;
		
	}
	

  
    /**  
     * Set the value related to the column: dataIdentifierTypeName.
	 * @param dataIdentifierTypeName the dataIdentifierTypeName value you wish to set
	 */
	public void setDataIdentifierTypeName(final String dataIdentifierTypeName) {
		this.dataIdentifierTypeName = dataIdentifierTypeName;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */
    @Id 
	@Basic( optional = false )
	@Column( name = "data_identifier_type_id", nullable = false, length = 127  )
	public String getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: schemaUri.
	 * @return A String object (this.schemaUri)
	 */
	@Basic( optional = false )
	@Column( name = "schema_uri", nullable = false, length = 256  )
	public String getSchemaUri() {
		return this.schemaUri;
		
	}
	

  
    /**  
     * Set the value related to the column: schemaUri.
	 * @param schemaUri the schemaUri value you wish to set
	 */
	public void setSchemaUri(final String schemaUri) {
		this.schemaUri = schemaUri;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public DataIdentifierType clone() throws CloneNotSupportedException {
		
        final DataIdentifierType copy = (DataIdentifierType)super.clone();

		if (this.getDataIdentifiers() != null) {
			copy.getDataIdentifiers().addAll(this.getDataIdentifiers());
		}
		copy.setDataIdentifierTypeName(this.getDataIdentifierTypeName());
		copy.setId(this.getId());
		copy.setSchemaUri(this.getSchemaUri());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("dataIdentifierTypeName: " + this.getDataIdentifierTypeName() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("schemaUri: " + this.getSchemaUri());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see Object#equals(Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final DataIdentifierType that; 
		try {
			that = (DataIdentifierType) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getDataIdentifierTypeName() == null) && (that.getDataIdentifierTypeName() == null)) || (getDataIdentifierTypeName() != null && getDataIdentifierTypeName().equals(that.getDataIdentifierTypeName())));
		result = result && (((getSchemaUri() == null) && (that.getSchemaUri() == null)) || (getSchemaUri() != null && getSchemaUri().equals(that.getSchemaUri())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
						newHashCode = String.valueOf(super.hashCode());

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode.hashCode();
	}
	

	
}
