/*
 * Copyright 2012 Johns Hopkins University
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package org.dataconservancy.ui.model;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.joda.time.DateTime;

/**
 * {@code Colllection} represents a collection in the dcs-ui.
 */
public class Collection extends BusinessObject {
    private List<String> alternateIds;
    private String title;
    private String summary;
    private String citableLocator;
    private List<ContactInfo> contactInfoList;
    private List<PersonName> creators;
    private DateTime publicationDate;
    private DateTime depositDate;
    private String depositorID;
    private String parentId;
    private String parentProjectId;
    private List<String> childrenIds;
    
    /**
     * Default constructor. Instantiates list members
     */
    public Collection() {
        super();
        contactInfoList = new ArrayList<ContactInfo>();
        alternateIds = new ArrayList<String>();
        creators = new ArrayList<PersonName>();
        childrenIds = new ArrayList<String>();
    }
    
    /**
     * Custom constructor
     * 
     * @param title
     *            - collection title
     * @param summary
     *            - summary about the collection
     * @param id
     *            - business id, generated by {@code IdService}
     * @param citableLocator
     * @param publicationDate
     *            - date of publication for the collection
     * @param contactInfoList
     *            - list of {@link org.dataconservancy.ui.model.ContactInfo} for the collection
     * @param alternateIds
     *            - list of alternateIds that identifies the collection
     * @param creators
     *            - list of names {@link org.dataconservancy.ui.model.PersonName} of the collection's data's creator for
     *            citation purposes
     * @param depositorID
     *            - {@link org.dataconservancy.ui.model.Person} who actually deposited the collection
     * @param depositDate
     *            - {@link org.joda.time.DateTime} when the deposit of the collection occurred
     */
    public Collection(String title, String summary, String id, String citableLocator, DateTime publicationDate,
            List<ContactInfo> contactInfoList, List<String> alternateIds,
            List<PersonName> creators, String depositorID, DateTime depositDate, String parentId, String parentProjectId,
            List<String> childrenIds) {
        
        super();
        this.title = title;
        this.summary = summary;
        this.id = id;
        this.citableLocator = citableLocator;
        this.publicationDate = publicationDate;
        this.contactInfoList = contactInfoList;
        this.alternateIds = alternateIds;
        this.creators = creators;
        this.depositorID = depositorID;
        this.depositDate = depositDate;
        this.parentId = parentId;
        this.childrenIds = childrenIds;
        this.parentProjectId = parentProjectId;
    }
    
    public Collection(Collection toCopy) {
        super();
        this.title = toCopy.getTitle();
        this.summary = toCopy.getSummary();
        this.id = toCopy.getId();
        this.citableLocator = toCopy.getCitableLocator();
        this.publicationDate = toCopy.getPublicationDate();
        this.contactInfoList = toCopy.getContactInfoList();
        this.alternateIds = toCopy.getAlternateIds();
        this.creators = toCopy.getCreators();
        this.depositorID = toCopy.getDepositorId();
        this.depositDate = toCopy.getDepositDate();
        this.parentId = toCopy.getParentId();
        this.childrenIds = toCopy.getChildrenIds();
        this.parentProjectId = toCopy.getParentProjectId();
    }
    
    /**
     * Get name of the collection
     */
    public String getTitle() {
        return title;
    }
    
    /**
     * Set name of the collection
     */
    public void setTitle(String title) {
        this.title = title;
    }
    
    /**
     * Get summary of the collection
     */
    public String getSummary() {
        return summary;
    }
    
    /**
     * Set description of the collection
     */
    public void setSummary(String summary) {
        this.summary = summary;
    }
    
    /**
     * Get citable locator of collection
     */
    public String getCitableLocator() {
        return this.citableLocator;
    }
    
    /**
     * Set citable locator of collection
     */
    public void setCitableLocator(String citableLocator) {
        this.citableLocator = citableLocator;
    }
    
    /**
     * Get contact information for collection
     */
    public List<ContactInfo> getContactInfoList() {
        return this.contactInfoList;
    }
    
    /**
     * Set contact information for collection
     */
    public void setContactInfoList(List<ContactInfo> contactInfoList) {
        this.contactInfoList = contactInfoList;
    }
    
    /**
     * Returns date of publication for collection
     */
    public DateTime getPublicationDate() {
        return this.publicationDate;
    }
    
    /**
     * Set the date of publication for the collection
     */
    public void setPublicationDate(DateTime publicationDate) {
        this.publicationDate = publicationDate;
    }
    
    /**
     * Returns the alternate user defined identifier.
     */
    public List<String> getAlternateIds() {
        return this.alternateIds;
    }
    
    /**
     * Set the alternate user defined identifier.
     */
    public void setAlternateIds(List<String> id) {
        this.alternateIds = id;
    }

    /**
     * Add contact information for collection
     */
    public void addContactInfo(ContactInfo contactInfo) {
        contactInfoList.add(contactInfo);
    }
    
    /**
     * Gets the list of creators for this collection
     */
    public List<PersonName> getCreators() {
        return creators;
    }
    
    /**
     * Sets the list of creators for this collection
     */
    public void setCreators(List<PersonName> creators) {
        this.creators = creators;
    }
    
    /**
     * Adds a creator to the list of creators for this collection
     */
    public void addCreator(PersonName creator) {
        if (creators == null) {
            creators = new ArrayList<PersonName>();
        }
        
        creators.add(creator);
    }
    
    /**
     * Gets the person who depostited the collection
     */
    public String getDepositorId() {
        return depositorID;
    }
    
    /**
     * Sets the person who deposited the collection
     */
    public void setDepositorId(String depositor) {
        this.depositorID = depositor;
    }
    
    /**
     * Gets the deposit DateTime for the collection
     */
    public DateTime getDepositDate() {
        return depositDate;
    }
    
    /**
     * Sets the deposit DateTime for the collection
     */
    public void setDepositDate(DateTime depositDate) {
        this.depositDate = depositDate;
    }
    
    /**
     * @return the parentId
     */
    public String getParentId() {
        return parentId;
    }
    
    /**
     * @param parentId
     *            the parentId to set
     */
    public void setParentId(String parentId) {
        this.parentId = parentId;
    }
    
    /**
     * @return the childrenIds
     */
    public List<String> getChildrenIds() {
        return childrenIds;
    }
    
    /**
     * @param childrenIds
     *            the childrenIds to set
     */
    public void setChildrenIds(List<String> childrenIds) {
        this.childrenIds = childrenIds;
    }
    
    public void addChildId(String childId) {
        this.childrenIds.add(childId);
    }

    public void setParentProjectId(String projectId) {
        this.parentProjectId = projectId;
    }
    
    public String getParentProjectId() {
        return parentProjectId;
    }
    
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((alternateIds == null) ? 0 : alternateIds.hashCode());
        result = prime * result + ((citableLocator == null) ? 0 : citableLocator.hashCode());
        result = prime * result + ((contactInfoList == null) ? 0 : contactInfoList.hashCode());
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((publicationDate == null) ? 0 : publicationDate.hashCode());
        result = prime * result + ((summary == null) ? 0 : summary.hashCode());
        result = prime * result + ((title == null) ? 0 : title.hashCode());
        result = prime * result + ((creators == null) ? 0 : creators.hashCode());
        result = prime * result + ((depositorID == null) ? 0 : depositorID.hashCode());
        result = prime * result + ((depositDate == null) ? 0 : depositDate.hashCode());
        result = prime * result + ((parentId == null) ? 0 : parentId.hashCode());
        result = prime * result + ((childrenIds == null ? 0 : childrenIds.hashCode()));
        result = prime * result + ((parentProjectId == null ? 0 : parentProjectId.hashCode()));
        return result;
    }
    
    /**
     * Compares two collections
     * 
     * @param obj
     * @return {@code true} if all of the corresponding fields in each object are equals. In case of fields that are
     *         made of list, the order of the lists will not be considered in the comparison.
     * @return {@code false} if one or more of the corresponding fields pairs are not equal.
     */
    @Override
    public boolean equals(Object obj) {
        Set<ContactInfo> contactInfoSet = new HashSet<ContactInfo>(contactInfoList);
        Set<String> alternateIdSet = new HashSet<String>(alternateIds);
        Set<String> childrenIdSet = new HashSet<String>(childrenIds);

        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Collection other = (Collection) obj;
        if (alternateIds == null) {
            if (other.alternateIds != null)
                return false;
        }
        else if (!alternateIdSet.equals(new HashSet<String>(other.alternateIds)))
            return false;
        if (citableLocator == null) {
            if (other.citableLocator != null)
                return false;
        }
        else if (!citableLocator.equals(other.citableLocator))
            return false;
        if (contactInfoList == null) {
            if (other.contactInfoList != null)
                return false;
        }
        else if (!contactInfoSet.equals(new HashSet<ContactInfo>(other.contactInfoList)))
            return false;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (publicationDate == null) {
            if (other.publicationDate != null)
                return false;
        }
        else if (!publicationDate.equals(other.publicationDate))
            return false;
        if (summary == null) {
            if (other.summary != null)
                return false;
        }
        else if (!summary.equals(other.summary))
            return false;
        if (title == null) {
            if (other.title != null)
                return false;
        }
        else if (!title.equals(other.title))
            return false;
        if (creators == null) {
            if (other.creators != null)
                return false;
        }
        else if (!creators.equals(other.creators))
            return false;
        if (depositorID == null) {
            if (other.depositorID != null)
                return false;
        }
        else if (!depositorID.equals(other.depositorID))
            return false;
        if (depositDate == null) {
            if (other.depositDate != null)
                return false;
        }
        else if (!depositDate.equals(other.depositDate))
            return false;
        if (parentId == null) {
            if (other.parentId != null)
                return false;
        }
        else if (!parentId.equals(other.parentId))
            return false;
        if (childrenIds == null) {
            if (other.childrenIds != null)
                return false;
        }
        else if (!childrenIdSet.equals(new HashSet<String>(other.childrenIds)))
            return false;
        if (parentProjectId == null) {
            if (other.parentProjectId != null)
                return false;
        }
        else if (!parentProjectId.equals(other.parentProjectId))
            return false;
        
        return true;
    }
    
    public String toString() {
        return "Collection{" + "title='" + title + '\'' + ", summary='" + summary + '\'' + ", id='" + id + '\''
                + ", alternateIds=" + alternateIds + ", citableLocator='" + citableLocator + '\''
                + ", publicationDate=" + publicationDate + ", contactInfoList=" + contactInfoList + ","
                + "creators=" + creators + ", depositor=" + depositorID + ", depositDate="
                + depositDate + ", parentId=" + parentId + ", parentProjectId=" + parentProjectId + ", childrenIds=" + childrenIds + '}';
    }

}
