/*
 * Copyright 2012 Johns Hopkins University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.dataconservancy.dcs.ingest;

import java.io.InputStream;

import java.util.Map;

/**
 * Frontend interface for staging and referencing uploaded file content.
 * <p>
 * Instances of <code>FileContentStager</code> serve to store, name, reference,
 * and retrieve the content of uploaded files. The stager is responsible for
 * persisting or providing access to file metadata - this includes filename,
 * size, creation date, hash, etc.
 * </p>
 * <p>
 * The stager interface makes no assumptions or guarantees as to the durability
 * of the data in the stager. Whether staged data is temporary or permanent
 * should be a documented characteristic of implementing classes or system
 * policy.
 * </p>
 * <p>
 * File content is addressed or referenced in three ways:
 * <dl>
 * <dt>key</dt>
 * <dd>An arbitrary text string, optionally provided by the caller. There are no
 * limitations in its content, though it must be unique.</dd>
 * <dt>referenceURI</dt>
 * <dd>A URI, generated by the stager implementation, that may be used to
 * uniquely identify the file content. It must not be assumed to be resolvable,
 * and should be a simple derivation of the key, if one has been provided.</dd>
 * <dt>accessURI</dt>
 * <dd>A URI that is assumed to be externally (but not necessarily universally)
 * resolvable to the file content. An example might be an file URI or a http
 * URI. Any implementing class should specify the kinds of URIs it can produce.</dd>
 * </dl>
 * </p>
 */
public interface FileContentStager {

    /**
     * Add file content without a pre-specified key URI.
     * 
     * @param stream
     *        File content stream.
     * @param metadata
     *        Map of file metadata in the convention of HTTP/1.1 headers.
     * @return Managed file reference, with identifiers arbitrarily generated by
     *         the implementing class.
     */
    public StagedFile add(InputStream stream, Map<String, String> metadata);

    /**
     * Retrieve an instance of file content.
     * 
     * @param id
     *        key or referenceURI of the file content.
     * @return Managed file reference. Will not be null.
     * @throws ExistenceException
     *         if the content is not found.
     */
    public StagedFile get(String id);

    /**
     * Determine whether the stager contains specific file content.
     * 
     * @param id
     *        key or referenceURI of the file content.
     * @return true if the file content is currently in the stager.
     */
    public boolean contains(String id);

    /**
     * Indicate that an ingest has finished, and a particular unit staged
     * content is no longer necessary.
     * <p>
     * The stager will free any necessary resources according to its own policy.
     * <p>
     * 
     * @param id
     *        key or referenceURI of the file content;
     */
    public void retire(String id);

    /**
     * Request the removal of a unit of content from the stager.
     * <p>
     * This merely requests that a particular unit of file content be removed.
     * Actual removal may be subject to policy or asynchronous verification and
     * workflow. As opposed to finish(), this should be used in exceptional
     * circumstances, such as failed ingest.
     * </p>
     * 
     * @param id
     *        key or referenceURI of the file content.
     */
    public void remove(String id);
}
